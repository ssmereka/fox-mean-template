#!/usr/bin/env node

/* Fox Script
 * Handles all fox commandline commands.
 * @Author Scott Smereka
 */


//**************************************************
//******************** Load Dependencies
//**************************************************

/***
 * Optimist 
 * @description A library for command option parsing.
 * @repo https://github.com/substack/node-optimist
 * @License MIT/X11
 */
var argv = require('optimist').argv;

/***
 * Lo-Dash 
 * @description A utility library for consitency, customization, and performance.
 * @repo https://github.com/lodash/lodash
 */
var _ = require('lodash');

/***
 * Path
 * @description Handles tranforming file paths.
 * @website http://nodejs.org/api/path.html
 */
var path = require('path');

var wrench = require('wrench'),
    util = require('util');

/***
 * FS
 * @description access the file system
 * @website http://nodejs.org/api/fs.html
 */
var fs = require('fs');

var sys = require('sys');

var exec = require('child_process').exec;

//**************************************************
//******************** Setup Fox
//**************************************************

var fox = {};

// Load the fox logger.
fox.log = tryRequire('fox_log.js');

// Load the default backend server configuration.
fox["config"] = tryRequire('config/default_server_config.js');

// If the object could not be loaded, then insert a empty object.
if( ! fox["config"]) {
  fox.log.warn("The default server configuration file could not be loaded.");
  fox["config"] = {}
}

// Absolute path to the fox bin directory.
fox.config["foxBinPath"] = __dirname;

// Absolute path to the fox module root directory.
fox.config["foxPath"] = path.resolve(__dirname, "../");

// Absolute path to the fox server boiler plate directory.
fox.config["foxServerPath"] = path.normalize(fox.config.foxPath + "/server");

// Absolute path to the current user directory.
fox.config["userPath"] = process.cwd();

// Find the path to the current server's directory.
fox.config["serverPath"] = getServerPathSync();

fox.config["cluster"]["workers"] = getNumberOfWorkers(fox.config);


//**************************************************
//******************** Console Argument Parsing
//**************************************************

// Flag indicating if the user input has been handled.
var isArgvHandled = false,
    isDaemon = false;

// Help - Print fox usage.
if( ! argv._[0] || (_.contains(['help', 'h'], argv._[0]))) {
  printHelp();
  exit();
} 

// Verbose (Debug Mode) - enable or disable debug mode.
if(argv.v || argv.verbose || argv.debug) {
  fox.config["debug"] = true
}

// Environment Mode - set the current operating enviorment mode.
if(argv.l || argv.local) {
  fox.config["environment"] = "local";
} else if(argv.d || argv.dev || argv.development) {
  fox.config["environment"] = "development";
} else if(argv.p || argv.prod || argv.production) {
  fox.config["environment"] = "production";
}

// Start - Start the server
if(argv._[0] && _.contains(['start'], argv._[0])) {
  isArgvHandled = true;

  if(isDaemonEnabled()) {
    if(fox.config.environment.toLowerCase() === "local") {
      startNodemanServer(fox.config);
    } else {
      startServerAsDaemon(fox.config);
    }
  } else {
    startServer(fox.config);
  }
} 

// Stop - Stop the server
if(argv._[0] && _.contains(['stop'], argv._[0])) {
  isArgvHandled = true;
  stopServer(fox.config);
} 

// Restart - Restart the server gracefully.
if(argv._[0] && _.contains(['restart'], argv._[0])) {
  isArgvHandled = true;
  if(isDaemonEnabled()) {
    restartServer(fox.config);
  }
} 

// Reload - Reload the server with 0 downtime.
if(argv._[0] && _.contains(['reload'], argv._[0])) {
  isArgvHandled = true;
  if(isDaemonEnabled()) {
    restartServerZeroDowntime(fox.config);
  }
} 

// Clear - Stop and remove all server history.
if(argv._[0] && _.contains(['clear'], argv._[0])) {
  isArgvHandled = true;
  clearServer(fox.config);
} 

// Clear - Stop and remove all server history.
if(argv._[0] && _.contains(['new'], argv._[0])) {
  isArgvHandled = true;
  createNewServer(argv._[1]);
} 

// Kill - Kill an application running on a given port.
if(argv._[0] && _.contains(['kill'], argv._[0])) {
  isArgvHandled = true;
  if( ! argv._[1]) {
    fox.log.info("You must include a port number.\nexample: kill 3000");
    exit();
  }
  exec("sudo kill `sudo lsof -t -i:" + argv._[1] + "`", function(err, stdout, stderr) {
    sys.puts(stdout);
    exit();
  });
}

// Argument is not valid
if ( ! isArgvHandled) {
  fox.log.error("Command has invalid arguments.");
  exit();
}


//**************************************************
//******************** Private Methods
//**************************************************

/**
 * Start the server using node-dev allowing the server
 * to restart when a file changes.
 */
function startNodeDevServer(config, next) {
  //TODO:  Add this if node-dev stops being so annoying.
}

/**
 * Start the server using nodeman allowing the server
 * to restart when a file changes.
 */
function startNodemanServer(config, next) {
  var startCommand = 'NODE_ENV="'+config.environment+'" nodemon';
  
  // Watch the application directory for changes.
  startCommand += ' --watch '+fox.config["serverPath"];

  // Watch Configuration files for changes.
  startCommand += ' --watch '+path.resolve(fox.config["serverPath"], "../configs");

  startCommand += " " + fox.config["serverPath"];
  console.log(startCommand);


  var child = require('child_process').spawn("nodemon", [fox.config["serverPath"],' --watch '+fox.config["serverPath"],' --watch '+path.resolve(fox.config["serverPath"], "../configs")], {
    cwd:'.'
  });

  child.stdout.on('data', function(data) {
    process.stdout.write("" + data);
  });

  child.stderr.on('data', function(data) {
    process.stderr.write("" + data);
  });

}


/**
 * Start the server normally using the "node" command.  
 */
function startServer(config, next) {
  exec('NODE_ENV="'+config.environment+'" node '+config.serverPath, function(err, stdout, stderr) {
    sys.puts(stdout);
    if(next) { 
      next(undefined, true); 
    }
  });
}

/**
 * Start the server using pm2 to daemonize the process.  Also 
 * perform any clustering that is needed.
 */
function startServerAsDaemon(config, next) {
  exec('NODE_ENV="'+config.environment+'" pm2 start '+config.serverPath+" -i "+config.cluster.workers+" --name "+config.name, function(err, stdout, stderr) {
    sys.puts(stdout);
    if(next) { 
      next(undefined, true); 
    }
  });
}

/**
 * Gracefully restart the server in deamon mode.
 */
function restartServer(config, next) {
  console.log("Restarting Server...");
  exec('NODE_ENV="'+config.environment+'" pm2 gracefulReload '+config.name, function(err, stdout, stderr) {
    sys.puts(stdout);
    if(next) { 
      next(undefined, true); 
    }
  });
}

/**
 * Reload the server with zero down time.
 * This will preserve the existing connections and reload 
 * each worker one by one.
 * Note:  This will not do a gracefull shutdown.
 */
function restartServerZeroDowntime(config, next) {
  console.log("Reloading Server...");
  exec('NODE_ENV="'+config.environment+'" pm2 reload '+config.name, function(err, stdout, stderr) {
    sys.puts(stdout);
    if(next) { 
      next(undefined, true); 
    }
  });
}

/**
 * Stop the server.  If the server encounters an error
 * trying to stop, log it, and send the results to the 
 * callback function.
 */
function stopServer(config, next) {
  exec('pm2 stop '+config.name, function(err, stdout, stderr) {
    sys.puts(stdout);
    if(next) { 
      next(undefined, true); 
    }
  });
}

/**
 * Clear all logs.
 */
function clearServerLogs(config, next) {
  exec('pm2 flush', function(err, stdout, stderr) {
    sys.puts(stdout);
    if(next) { 
      next(undefined, true); 
    }
  });
}

/**
 * Delete all servers from pm2.
 */
function deleteServersFromPm2(config, next) {
  exec('pm2 delete '+config.name, function(err, stdout, stderr) {
    sys.puts(stdout);
    if(next) { 
      next(undefined, true); 
    }
  });
}

/**
 * Clear and remove all current tracking of the server.
 */
function clearServer(config, next) {
  stopServer(config, function(err) {
    clearServerLogs(config, function(err) {
      deleteServersFromPm2(config, next);
    });
  });
}

/**
 * Create a new server.
 */
function createNewServer(name) {
  var newServerPath = path.normalize(fox.config.userPath + "/" + name);

  // Check if the new server location is taken
  if(fs.existsSync(newServerPath)) {
    fox.log.error("Server already exists at " + newServerPath);
    exit();
  }

  // Check for a collision of server resources.
  if(fox.config.serverPath && fox.config.serverPath.indexOf(fox.config.userPath) !== -1) {

    // Check for index file at current directory
    if(fs.existsSync(path.resolve(newServerPath, "../index.js"))) {
      fox.log.error("Server already exists at " + path.resolve(newServerPath, "../index.js"));
      exit();
    }

    var serverSplitPath = fox.config.serverPath.replace(fox.config.userPath, "").split(path.sep);

    if(serverSplitPath[1] === "name" || serverSplitPath[1] === "app") {
      fox.log.error("Server already exists at " + fox.config.serverPath);
      exit();
    }
  }

  fox.log.info("Creating " + name + "...");
  wrench.copyDirSyncRecursive(fox.config.foxServerPath, newServerPath, {
    forceDelete: true, 
    preserveFiles: true, 
    inflateSymlinks: false, 
    excludeHiddenUnix: true
  });

  fox.log.info("Configuring...");

  fox.log.info("Installing modules...");
  exec("npm --prefix " + newServerPath + " install", function(err, stdout, stderr) {
    //TODO:  Output this to log file.
    fox.log.success("Server " + name + " created successfully.");
    exit();
  });
}


/**
 * Print the fox script's usage.
 */
function printHelp() {
  fox.log.info("Usage:  fox <command> <options>\n");
  fox.log.info("Commands:");
  printColumns("new <name>", "Create a new server with a specified name.");
  printColumns("start", "Start the server.");
  printColumns("stop", "Stop the server.");
  printColumns("restart", "Restart the server.");
  printColumns("reload", "Restart the server with zero downtime.");
  printColumns("clear", "Stop the server and clear all logs and history.\n");

  fox.log.info("Options:")
  printColumns("-v", "Enable verbose or debug mode.");
  printColumns("-l", "Start in local environment mode.");
  printColumns("-d", "Start in development environment mode.");
  printColumns("-p", "Start in production environment mode.\n");
  exit();
}

/**
 * Print two strings in two different columns in a format much
 * like a word on the left and the definition on the right.
 */
function printColumns(left, right) {
  left = (!left) ? "" : left;
  right = (!right) ? "" : right;
  
  var n = 25 - left.length;
  fox.log.info("  " + left + Array(n+1).join(" ") + right);
}

/**
 * Finds the absolute path to the server application's
 * directory synchronously and returns that value.
 */
function getServerPathSync() {
  var currentDir = fox.config.userPath,
      grandParentDir = path.normalize(currentDir + "/server/app"),
      parentDir = path.normalize(currentDir + "/app");

  if(fs.existsSync(currentDir + "/index.js")) {
    return currentDir;
  } else if (fs.existsSync(parentDir + "/index.js")) {
    return parentDir;
  } else if(fs.existsSync(grandParentDir + "/index.js")) {
    return grandParentDir;
  } else {
    return undefined;
  }
}

/**
 * Attempts to require a file by name synchronously.  This
 * method will do a small, but smart search for the file 
 * and require it.  If the file is not found, then undefined 
 * is returned.
 */
function tryRequire(file) {
  if( ! file) {
    return undefined;
  }

  file = (file.charAt(0) != '/') ? '/' + file : file;
  var currentDirectory = "." + file;
  var binDirectory = path.resolve(__dirname, file);

  if(fs.existsSync(currentDirectory)) {
    return require(currentDirectory);
  } else if(fs.existsSync(binDirectory)) {
    return require(binDirectory);
  } else {
    return require(currentDirectory);
  }
}

/**
 * Check if the server should run in daemon mode or not.
 */
function isDaemonEnabled() {
  if(fox && fox.config && fox.config.daemon !== undefined) {
    return fox.config.daemon;
  } else {

    // Default daemon to enabled.
    return true;
  }
}

/**
 * Get the number of workers to create based on the 
 * configuration options.
 */
function getNumberOfWorkers(config) {
  var isCluster = (config["cluster"] && config.cluster.enabled);
  if(isCluster) {
    var cpuCount = require('os').cpus().length;
    var workerMax = (config.cluster["workerMax"]) ? config.cluster.workerMax : cpuCount;
    
    // Determine the number of workers to create based 
    // on the number of CPUs and the max number of workers.
    var workerCount = (config.cluster["workerPerCpu"] && cpuCount <= workerMax) ? cpuCount : workerMax;

    return (workerCount == cpuCount) ? "max" : workerCount;
  } else {
    return 1;
  }
}

/**
 * Exit the script.
 */
function exit() {
  process.exit(1);
}